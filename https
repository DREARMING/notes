https握手过程

一、客户端发送 client_hello （Random_C随机数、加密组件套件，压缩算法套件，ssl版本（现在基本用TLS1.2或以上））
加密组件套件：一个套件包含4种算法，分别对应着 https 防范攻击的算法
	1. 身份验证算法
	一般是RSA这种非对称加密算法，用于确保与自己通信的对方的身份，因为非对称算法的特性，私钥加密的内容只能由公钥解开，公钥加密的内容只能由私钥解开。具有不可甩锅的性质。

	2. 密钥生成算法
	用于生成对称加密的密钥

	3. 对称加密算法 -- 加密解密共用一个密钥

	4. 摘要算法
	对传输的信息进行摘要处理，避免发生篡改。

二、服务器收到后，发送 server_hello(random_s随机数、选定的加密组件，选定的压缩算法，具体的握手协议版本)
并且发送证书给客户端server_certificate,

三、客户端校验证书，之后产生随机数 pre_master, 并且用证书中的公钥对其进行加密，然后发送给服务器。
这个时候客户端已经具备了生成 对称加密算法的密钥的所有数据 - 三个随机数， 通过算法就可以得到 协商密钥。
然后发送 encrypted_handshake_message ，就是将前面所有通信参数的 hash 值与 一些数据，用 协商密钥和对称加密算法进行加密，然后发送给服务器。告诉了服务器，以后都用这个加密了。
这个时候，只需要等待服务器的校验成功反馈即可。

四、服务器用私钥解开了 pre_master， 这时候，服务器同样具备这3个随机数，可以用同样的密钥生成算法，生成协商密钥，用协商密钥解开客户端发送过来的数据，用之前通信的参数，用与客户端相同的 摘要算法 得出一个 hash值，比较是否相同，如果这个过程失败，https握手失败。成功，代表客户端的密钥和算法，都没有问题。
这个时候，同样发送 encrypted_handshake_message 将上述过程的内容，加密后发送给客户端。

五、客户端校验成功，握手结束。往后传输的内容都是加密的