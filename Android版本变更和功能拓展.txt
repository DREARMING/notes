
兼容包的理解：当系统的新版本发布后，因为新的api必须运行在新版本的系统上才有体现，但是开发者也想在低版本的系统中使用上这令人激动的功能，
毕竟用户的系统更新也许需要等待很久很久的时间。google为了让低版本系统上能运行这功能，额外写了兼容包，所以新版本系统的release，往往伴随着support包的发布，
support包的功能就是利用低版本的api，实现与新版本一样的功能。

target api是最为重要的api， 它指定了 应用运行在不同版本的系统上具体表现怎样的行为。
compile sdk level 是编译时api，可以方便应用该sdk level 下有哪些新功能和发生了什么变更，但是都知道android.jar是空实现，
具体实现是交由手机中的Android系统的jar实现的，里面实现了兼容性处理，各个target api会呈现不同的表现

kitkat 4.4 - 19

1. NFC
2. SAF 存储访问框架。 
open_document，实现DocumentProvider，借助系统UI实现选择图片，还可以暴露自己的文档。需要禁止4.3的访问方式

4.3或者以下，需要禁止掉 saf的provider，然后允许


3. 沉浸式体验。透明状态栏和导航栏。

4. webview基于chronm的源代码快照，意味着性能提升了，然后需要做下兼容处理。

5. 开发过程中添加录屏功能，在sdk的工具中adb shell screenrecord	提供支持

6. 音视频功能
一、添加了无缝切换分辨率功能
二、DASH加密
三、http直播流 HLS的支持更新


7.ndk方面
renderscript性能提升，gpu加速

8.图形
surfaceFlinger 从openGl ES1.0 -> openGL ES2.0

9.连接方面
提供了红外支持
蓝牙功能增强
WIFI直连，同个wifi网络的设备间可以直接传送数据。



---------------------------------------------------------------------------------



Lollipop 5.0 - 5.1变更和优化  21-22  （堪称最大更新）

1. Material Design的引入

2. 性能
切换运行时从dalvik -> ART，预先编译 AOT
64位架构支持

3. 通知
可以在锁屏时弹通知，并提供一些控件
在通知中增加控件按钮，可以 migrate from remoteview to notification
从NotificationBuilder中添加震动和声音。取消在代码中调用Vibrator和MediaPlayer

4. 连接

蓝牙功能增强

网络状态访问？？？

nfc行为变更，可以动态注册应用id

5. 图形
opengl es 3.1支持

6. 相机
全新的CAMERA api

7. 屏幕录制和共享
？？？这么牛逼？？

8. webview
支持webRTC、webaudio、webGL支持。

9. JobScheduling添加
。。这里才引入吗？

10. getRecentTasks
安全起见，用AMS.getRecentTasks废弃查询当前的用户使用程序，如果查询自己的，可以用getAppTask

11. 绑定服务
bindService 必须显示指定，不允许隐式了，也不要为服务添加隐式拦截filter了。 -- important

12. 自定义权限
申明的自定义权限必须全局唯一，除非是签名相同的应用之间

13.TSL/SSL配置变更
1.加密套件增加了AES-GCM
2. 启用了 TSL1.1 和 TSL1.2

14. 多 SIM 卡支持


15. 网络Api
完全移除 org.apache.http 类和 android.net.http.AndroidHttpClient 类，建议改用URLConnection






------------------------------------

Android 6.0 -- Android M   23

1. 运行时权限
以前的应用直接装就ok了，权限会全被授予。6.0以后，安装不要求任何权限，全部改到运行时了，由用户一个个去授予。引入权限组的概念，同属在dangerous的具体权限组，用户授予了权限，下次申请同一个组的其他权限会自动被授予。

2. 指纹身份认证 --- 

3. 确认身份凭据
有时候一些应用安全性比较高的用户，比如微信的支付钱包进入，可以设置多长时间免掉输入锁屏密码或者其他身份认证流程。或者可以监听锁屏时间这些操作来确认身份凭据。

4. 通知更改
添加通知icon

5. ColorStateList 主题属性

6. 相机
闪光灯api添加，可以在不打开相机设备的情况下打开或关闭闪光灯的火炬模式

camera2 api进行了部分扩展

7. 低电量模式和应用待机模式  ---   important ---------------------------------

都是基于没有插上电源的情况

低电耗模式：
用户熄灭屏幕、且静止一段时间，会进入低电耗模式。

该模式下：
1. 暂停 Job 调度、同步
2. 网络访问
3. 忽略wake lock。cpu没法工作？

进入该模式后，会抽点时间退出该模式，执行上面一些任务，然后又会继续进入低电耗模式。


应用待机模式：
更严格的模式，你的应用如果一段时间没有被用户操作，基本就废了，限制进行网络访问，大概一天一次的频率允许其访问网络。

应用在通知栏有通知，通过其他手段让应用处于前台进程，就可以避免进入这种模式。

插上电源就会释放出来，可以正常操作。


8. 网络变更 
取消apache httpclient 的支持，请迁移到 UrlConnection

openSSL迁移到 boringSSL，在jni调用openssl的需要注意，可以调用java的，不要引入openssl第三方库，有可能引起异常


9. 校验apk更严格
如果在 apk 包中的 manifest文件在apk中并不存在，该apk被视为已破坏

10。运行时 ART的一些修改
1. 正确实现了newInstance了，只要兼容包跟着更新，以前的版本也不会有什么问题

11. 相机改了一些服务，但没用过

12. 密钥库的一些更改：
停用或重置安全锁定屏幕时（例如，由用户或设备管理员执行此类操作时），系统将不再删除需要闲时加密的密钥，但在上述事件期间会删除需要闲时加密的密钥。

--------------------------------------------------


Android 7.0 -- Android N  -- 24

1. 比6.0版本的低耗电 更严格的 低耗电模式
1. 以前是静止不动才会进入低耗电模式，现在放进袋子里，走路也会发生这种情况。
2. 以前充电是不会进低耗电模式的，现在插电一段时间，没有操作，也会被判定进入低耗电模式。

2. 私有文件权限问题
为了提高私有文件的安全性，文件的共享，需要借助FileProvider，否则会引起 FileNotExposeException
私有文件包括：应用内部存储文件/data/data/[package] 和外部存储私有目录文件 /data/data/Android/[package]/xxx/
私有文件不再能创建全局访问属性，比如 world_read/world_write

对于向外提供的文件uri ： file：//... 会被拒绝访问，运行时错误，必须借助FileProvider进行提供文件Uri


3. 禁止应用动态链接私有第三方库。 所有库必须打包到 apk中。

4. 移除了3个静态广播，需要在app动态注册
1. 网络连接改变广播 CONNECTIVE_ACTION
2. ACTION_NEW_PICTURE 和 ACTION_NEW_VIDEO

5. 禁止在 binder 中传递过大的数据量，将会造成运行时错误。

6. 多窗口支持
就是同一个屏幕可以执行两个应用

7. 通知功能增加
1. 模板更新
2. 直接回复
3. 捆绑通知
4. 自定义视图


7. 添加 jit ，优化运行时代码编译，从 Aot -> jit，执行代码更快，安装速度更快

8. SurfaceView性能优化
7.0后，推荐用SurfaceView 替代TextureView，更加省电，以前SurfaceView产生黑边和无法移动的问题已被修复。


9. 快速设置图标可以移动和添加自己的快速设置图标
就是wifi图标、闪光灯图标这些可以由用户移动位置了。

10. 号码屏蔽、来电拦截

11. webview利用手机上的chromn apk进行更新。。 估计没什么卵用，并不是每个app装chromn


12 opengl 3.2引入

13. apk v2 签名引入
更快速安装应用，对应用内的文件保护得更加安全

14. 网络安全性配置
文件配置 Ca证书、限制明文传输等配置。



---------------------------------------------------



Android 8.0 -- Android O   -- 26

功能更新：

1. 画中画模式

2. 通知又变更，添加了新的api
一、 通知渠道 -- 可以借此设置属于该渠道的通知通用策略，比如红点、呼吸灯、声音、震动、重要级别等信息
二、 通知标志 -- 应该类似于未读信息一样的红点标志
三、 通知超时

3. 自动填充框架

4. 可下载字体

5. 多显示器支持 -- 对无纸化的双屏显示器处理？

6. 统一布局外边距和内边距
layout_marginVertical <==> layout_marginTop and layout_marginBottom

7. AnmatorSet增强，可以直接倒播动画
不用定义两个相反的动画，比如播放器的标题栏自动出现和消失两个相反的动画

8. ContentProvider
提供分页功能
内容刷新请求

9. JobScheduler 改进
1. 添加新的约束条件： 存储空间低的时候不执行、电量低时不执行、需要一个计费网络
2. ClipData支持，通过URL权限授予工作列队的Intent

10. findViewById的签名变更了
<T extends View> T findViewById(int id)


11. 增强 SAF 功能
1. 对存储在云端的文件无法提供 文件描述符的， 可以借助自定义 DocumentProvider解决。

12. 安全
新的账号访问和 DiscoverApi


行为变更：

1. 后台执行变更：
一、 后台的应用，无法执行大部分 在manifest声明的 隐式Intent 广播
二、 对于没有活动组件的应用，在一定时间过后，其所有唤醒锁将会被取消
三、 服务变成后台后，一定时间后，将会被限制服务的访问，等于调用了stopSelf。 （草，这变更很严重）
1. 可以考虑用 JobScheduler 替换, 执行期间具备cpu、网络获取
2. 考虑用NotificationManager.startServiceInForeground(),启动前台服务，在应用栏显示一个通知，让服务正常运作。
3. 后台应用无法调用startService了，不然会抛运行时错误。不要尝试在 workmanager中启动服务，应该直接在worker中执行逻辑

2. 后台获取位置信息频率被降低

3. 权限
以前对于某个权限组的权限进行申请，会默认授予整个 权限组的所有权限，在8.0被纠正，只会授予具体的权限，但是对其他权限申请，会默认自动授予，而不会提示用户授予通过

4. 类加载行为


---------------------------------------


Android 9.0 -- Android P   -- 28

一. 功能添加和api更新

1. 全面屏的支持

2. 通知更新
一、 用户可以屏蔽整个渠道，而应用需要判断渠道是否为屏蔽，屏蔽应该不要向渠道发送通知。

3. 多摄像头支持

4. ImageDecoder
可以用于取代加载高清大图，进行缩放的功能：BitmapFactory和 BitmapFactory.option 

5. AnimatedImageDrawable
用于绘制显示GIF、webp动画图像

6. 安全
1. 统一生物识别身份验证对话框
2. Android Protectd Confirmation

7. Dex文件的提前ART转换

8. 设备端系统跟踪 -- 不知是什么


二、所有应用发生的变更

1. 电源管理
省电模式下，应用更容易被置于应用待机模式，被限制网络访问，执行此项无论目标target api 是什么
省电模式下，后台应用没有网络访问权限。


应用待机群组， 应用待机模式下，会至于哪个群组，不同的群组，会受到不同的约束。

活跃的群组：没有任何限制

工作群组： job会被推辞2 hour，alarm会被推辞 6m， 网络没有限制

常用群组：job会被推辞8h，alarm会被推辞30，网络没有限制

Rare：job会被推辞24，alarm会被推辞2h，网络也是被推辞24h


2. 强制执行 FLAG_ACTIVITY_NEW_TASK 要求
在 Android 9 中，您不能从非 Activity 环境中启动 Activity，除非您传递 Intent 标志 FLAG_ACTIVITY_NEW_TASK。 如果您尝试在不传递此标志的情况下启动 Activity，则该 Activity 不会启动，系统会在日志中输出一则消息。

三、针对 Android P的应用变更


１.　申请前台服务，必须申请　FOREGROUND_SERVICE　权限，不过是普通level的权限而已

２.　禁止明文传输，因为在Android P 的isCleartextTrafficPermitted()返回 false，可以通过 7.0 网络xml配置文件进行更改

3. 来自已暂停应用的通知

在 Android 9 之前，暂停的应用发出的通知会被取消。 从 Android 9 开始，暂停的应用发出的通知将被隐藏，直至应用继续运行。

4. 按进程分设基于网络的数据目录

为改善 Android 9 中的应用稳定性和数据完整性，应用无法再让多个进程共用同一 WebView 数据目录。 此类数据目录一般存储 Cookie、HTTP 缓存以及其他与网络浏览有关的持久性和临时性存储。