消息流ID
消息流ID可以是任意值。当同一个块流被复用到不同的消息流中时，可以通过消息流ID来区分它们。另外，对于RTMP块流而言，这是一个不透明值。该字段占用4字节，使用小端序。

握手完成之后，此连接可以复用于一到多个块流。每个块流携带一个消息流的某种类型的消息。块通过网络进行传输。传输过程中，每个块必须被完整的发送后，才能发送下一个块。接收端接收完成之后，根据块流ID把块组装成完整的消息。



chunk streamid == 2 的chunk流  负责传输rtmp的协议控制信息， 该chunk流负责复用message stream id = 0的信息流控制指令  --拥有最高优先级


协议控制消息  - msg streamd id = 0, chunk stream id =0
元数据信息  -- 流的信息，metadata、分辨率、视频名等
共享消息
音频消息 -- 音频信息
视频消息 -- 视频消息
聚集消息 
命令消息 - start、play、publish等


flvTagType
分为三种数据：
音频数据、视频数据、视频信息数据(meta data)

Flv{
	boolean dropable; //是否可以丢弃的帧
	int timestamp;	 //时间戳
	byte[] byteBuffer; //数据
	boolean isKeyFrame; //是否是关键帧
	boolean flvTagType;  //音频、视频、原数据类型
	int videoFrameType;  //关键帧、B、P帧这些参考帧类型
}

rtmp[]://hostname[:port]/appname/flv:streamname  optArgs

关于rtmp的URL解析，optArgs含义，请看霄骅的RTMPdump使用说明

流程：

解析URl做的事情
1. 



AMF数据格式:https://blog.csdn.net/ddr77/article/details/52355337

Number 		0×00 	double类型
Boolean 	0×01 	bool类型
String 		0×02 	string类型
Object 		0×03 	object类型
MovieClip 	0×04 	Not available in Remoting
Null 		0×05 	null类型，空
Undefined 	0×06 	
Reference 	0×07 	
MixedArray 	0×08 	
EndOfObject 	0×09 	See Object ，表示object结束
Array 		0x0a 	
Date 		0x0b 	
LongString 	0x0c 	
Unsupported 	0x0d 	
Recordset 	0x0e 	Remoting, server-to-client only
XML 		0x0f 	
TypedObject (Class instance) 	0×10 	
AMF3 data 	0×11 	

AMF的数据类型 + [AMF数据的长度（string和object需要有，但是boolean类型因为已经明确是一字节的了）] + AMF数据b + [数据类型结尾（object类型才有）]

比如一个在rtmp中的连接参数Connection,它有1个子参数app，appname="flash"

0x02 	0x0A connectionbytes   0x01 		0x03  0x02  		0x07 appnamebytes 0x03 0x05 flashbytes 0x00 0x00 0x09
|	  	  |			|			|		    |      |    		|     |           |    |      | 		  |		
string  10bytes    string      1个对象		Object stringtype	7len	 								000009对象类型结束标志
type      leng     content


/**
     * 建立连接的步骤：
     * 1. 建立socket连接
     * 2. rtmp握手  //意义：如tcp握手时确保网络和tcp协议版本这些都是可以交流的，rtmp握手也是如此，是确保版本可以解析
     *      1.客户端发送 c0、c1       //c0、s0都是携带rtmp版本号
     *      2.服务器 回复 s0、s1
     *      3. 客户端发送c2 == s1
     *      4. 服务器回复s2 == c1
     *      5. 校验 s2 == c1,成功则代表rtmp握手ok
     * 3. 发送Connect命令，用于初始化连接。而这些连接需要的参数都是从url解析出来的Link的参数
     * 4. Connect命令封装成RTMPPacket，相当于chunk块，发送RTMPPacket 的流程如下：
     *     1.先判断rtmp.m_vecChannelsOut是否保存有同chunk流最新发送的chunk块，如果发现chunk流id越标，增加数组长度，如果有，记为
     *     prePacket,并且改变header_type,headerType影响Message header占的字节数，并且当前chunk的时间戳可以相对于prePacket的时间戳
     *     2.根据headerType选择该chunkHeader最小的长度，即csid默认认为占一字节、extends stamp默认没有。
     *     3.计算 时间戳，是否超过 0xfffff，超过header size增加4字节用来保存extend stamp
     *     4. 计算csid，大于319增加两字节保存csid，大于63，增加一字节。到此chunkHeader的大小已确定
     *     5. 填充chunk basic header，根据csid扩展的字节数判断是否需要填充时间戳，message长度，messageType，message streamd id等信息
     *     6. 对chunkData的大小进行判断，如果大于chunk size，在while循环分割，然后发送出去。分隔的块用headerType == 3模式分割，不存在message header
     *     7. 保存当前RTMPPacket到rtmp.m_vecChannelsOut中
     */
    




关于rtmp协议的作用分析：

协议，规范化信息交流所制定的规约，rtmp用于流媒体资源的传输

音视频数据量的传输，量大而频繁，在低带宽上进行传输，很可能因为前面一些大数据量的信息被


rtmp支持在连接时校验token等，避免其他人获取该流，可以见到网上一些可用的流地址，增加服务器负担，这在私有服务器中很容易被人捉包获取流地址后，进行恶意消耗服务器资源，降低流服务器整体性能。


rtmp play方法 可以指定播放流或者点播视频，还可以指定起始时间，播放的时常等。用于解决普通的播放功能外，还可以跳到指定位置播放，比如点播断掉重连。还能支持播放列表?

rtmp play2方法可以在不修改播放内容时间线的前提下切换到一个不同码率的流。需要服务器包含了多个不同码率的流文件用于支持客户端的播放2请求。该方法的参数没有进行约束，可以在AMFObject指定流的名称，开始时间，码率，而同样的该方法的实现需要服务器的支持

deleteStream 删除流 和 关闭流 

RTMP meta信息，获取音视频元信息

seek 跳到指定位置播放视频。live 下不支持

pause 暂停推流，但不是结束推流，客户端仍然在播流，只是进入黑色界面，没有音视频数据。等待推流端发送音视频数据上来就可以正常显示


-----------------------------------

关于 ACK 和 windoow ack size，set peer bandWidth个指令的理解
假设有客户端A 和 服务端B，A向B推流，A和B遵从下面这条规则来达到控制流量的目的

A如果发送了B给到的窗口大小N1字节数据，A就必须停下来，等待B给A发送ACK消息。B收到N1个数据后，
发送ack个A，A就继续发送数据。

如果B发现A发送数据太快了，想限制它的输出流量，那么通过set peer bandWitdh给A，里面包含新的窗口大小，
A收到之后，改变自己的窗口大小，那么这时候的窗口大小n2<n1,那么A在输出更少字节的时候就会停下来了。从而达到限制流量的目的。收到新的窗口大小n2后，A接受了，发送新窗口大小给B，当B收到n2字节后就要发送ack给A，否则A一直处于等待发送的状态。

这个前提就是发送端A遵守发送window size之后停下来。


那么什么时候会要出现这种控制流量的措施呢？
情况1 ：A  推流给 B
B发送很少数据给A不需要限制流量
A发送很多数据给B，B需要限制A流量？这种情况是不存在的，A是实时推流的，B必须能够及时处理A所有数据，才能保证推流效果好，A发一帧，B就要收一帧，或者因为延迟，跳帧，所以B必须具备完全处理A数据的能力

C 从 B中拉流播放
这个时候C输出数据给B，数据量很少，不需要限制流量。
C接受数据B，有可能因为B网络很好，拼命发送数据给C，这个时候C每秒播放的数据是肯定，C的缓存少，没有做下载处理，那么C就不可能完全接收由B发过来的速度，C就要设置比较小的窗口大小给B，慢点，等我ack了，你再发。

而在直播情况下，要求C必须能够完全处理B发送过来的数据，否则给用户的画面就是延时的，这里面的数据量也相对下载播放来说要小，这里C收到的流量既受推流端的速度影响，又受服务器转码，转发的影响。上述情况应该是在点播情况下容易出现

综上两种情况，推流或者拉流客户端必须要实现，当收到window窗口大小数据时，发送ack给B，让B继续发送消息过来。而没有必要实现自己停止发送数据给B。

而B必须实现记录客户端的window size，并且在发送了window ack size 时停止发送数据

------------------------


