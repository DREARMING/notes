热修复

热修复对类的修复有两种类型，一种是native底层修复、一种是类的全量dex修复

native修复主要是通过 对 底层类的 method 进行替换，从而实现应用的热更新，而不需要重启app

具体实现步骤是，
首先获取通过 jni，获取java类的方法的底层指针，然后用新dex的方法实现 替换掉 旧dex的实现，不是通过成员变量一个个赋值的方法实现，
因为 artMethod 的数据结构是公开，任何厂商都可以对其进行更改，所以，从一种数据结构类型的方法入手，artMethod 是线性排列的，即一个类的多个方法的指针在底层存储是紧密的，数组形式的，所以可以构造一个普通类如下：
public class SimpleClass{
	public final void method1(){

	}

	public final void method2(){

	}
}

利用jni
int size = env->fromRefectMethod(jmethod2) - env->fromeRefrectMethod(jmethod1); //从而得到method1的大小，即在具体运行时环境下，artMethod的具体值，
然后就可以通过memcpy(oldmethod1, oldmethod2, size), 实现方法的热更新。

但是native方法虽然可以不用通过冷启动，就可以实现更新，但是缺点也是明显的，如果方法发生增加，删除，在art虚拟机中，很多方法的地址在是被内嵌入到方法中的，如果增加了修方法A，那么原本dex中数据结构中的 方法b 引用方法C，而新dex中虽然没更改这种引用关系，但是c的地址可能已经发生变更了，这种情况无法通过native修复来解决。

java 多态的实现

类底层实现 是通过 vtable 来保存类的方法， 包括从父类中继承下来的方法

vtable的形成，是先把父类的 vatable 给复制过来，然后在子类的，如果方法签名相同，会覆盖掉前面vtable中的值，即父类的方法会被覆盖掉。如果没有相同，那么在vtable底部添加上新方法
所以：
Class A {
	void method1(){}
}

class B extends A{

	@override
	void method1(){}
	void method2(){}
}

A obj = new B();
obj.method1();

底层的实现是：
因为 obj 的类型是A，所以从A类中获取到 method1的 vtable 的index = 0；
然而，obj的具体实现是B，将会去寻找 B类的 vtable，并且把上面寻找的index 作为调用的方法，很明显，java是单继承的，vtable前面的总是父类的方法，但是有可能被
b类的实现覆盖，所以获取的index总是对的。所以这种方式就实现了调用B类的method1()，


全量的dex的类更新
因为应用运行期间，已经加载大部分的类，这个时候是无法对类进行替换的，所以全量的dex更新方案只能通过冷启动实现。
tinker 通过对基线包 和 发布包的dex 进行dex层面的指令和方法比较，得出一个差量dex，是tinker独家自研的算法，基于底层的dex数据结构，得到了较小的补丁包。然后再运行时，
跟基线包的dex，进行合成，生成全量的dex，并把该dex至于 dexElements前面，classLoader就会优先加载 新生成的全量dex的class，从而覆盖掉基线包的dex，实现类的修复。

因为Application 是程序的第一个入口，所以 Application中直接引用的类，将会一开始就被加载，这时候补丁还没生效，全量dex还没插进dexElements前面，就会导致Application直接引用的类仍会加载旧dex的，从而无法修复这些类。

所以 tinker 直接代理了 Application 类， 用户不能够使用自己的application， 而是把Appliation中实现全部迁移到 ApplicationLike 中，这样Application类就非常干净，没有任何与修复类相关的代码，从而避免上述的情况，不过就是入侵性太强了




关于 资源的热更新

需要知道的是， apk 中的资源 都是通过 AssetManager进行加载的， 而市场上的 资源热更新都是参考 Instant Run 的实现，
Instant Run 通过 构造一个新的 AssetManager， 然后将新的资源包路径添加到该AssetManager中，从而使 新的AssetManager具备加载新资源的能力。
然后通过将代码中所有的AssetManager的引用换成新的AssetManager，从而实现资源的更新。

其实原理是很简单的，但是本身资源包的替换却要把所有的AssetManager的引用进行替换，这里涉及了大量的操作。而阿里的sophix用了一种更加聪明的方式，
直接在底层析构掉原来的AssetManager，然后重新调用AssetManager的init方法，并且把 一个新的资源包，但是packetid是0x66开头的，添加到进去，而java层的引用没有更改过，从而实现无感知的更新了资源。因为新的packetId跟原来的packetId不一样，所以新资源包的资源不会跟原资源包的资源造成冲突。

但是因为换了资源包PacketId， 那么资源id的变更是如何处理的，下面有几种情况可以分析：

首先是新增资源：

基线包 			新包  						补丁
0x79 001		0x79 001					0x66 001
0x79 002		0x79 002  -- 新增资源
				0x79 003

这种情况，会引起基线包的资源id为002的造成下移，如果不处理这种情况的话，那么将会有大量的类代码需要修复，这肯定不行的
所以阿里的修复方式是在基线包如此处理,在补丁中将新增的资源id改成0x66 001的资源，然后将那些因为新增的资源造成下移的，从新在代码中更改会原来的，在新包的代码中将0x79 003改回0x79002,从而在补丁类中，代码没有变更过，所以这样就解决了资源的增加问题。

删除资源，删除的资源任由它放在基线包即可，因为没有代码引用到它了，所以对程序没有影响

修改资源


基线包 			新包  							补丁
0x79 001		0x79 001  -- 修改的资源			0x66 001 -- 新增
0x79 002		0x79 002  -- 新增的资源			0x66 002 -- 修改

修改的资源也很容易，把补丁中涉及到修改的资源的类文件的 资源引用全部替换成补丁的 0x66 002，然后通过补丁把基线包的类替换掉，就解决资源的修改


so 库修复



dexopt dexoart

全量 dex 的意思

不像 qq空间的方案，将 发生修改的类 单独打包成一个 patch dex, 然后利用 classLoader 加载类的流程，会将 DexPathList 对象的 Element数组，用新dex构建一个 Element，然后通过反射，将新dex插进数组前面，这样子，旧dex的bug类，就会无法被加载到，而会加载到新dex的类，这样就解决了类修复问题。
但是qq空间这种方案，却有如下两种问题：
1. dalvik 虚拟机的 dexopt 操作， 如果一个类的直接引用类都在同一个dex的话，就会把这个类打上 ISPREVIERTIFIED 标志， 举个例子： application 类
里面只引用了一个ClassA，它和application类在同个的DEX，在应用安装过程中， application类会被打上标志， 当Application类中加载 ClassA 时就会进行校验，如果classA无法在本dex中找到，就会发生错误，这种打上标志的行为有利于避免运行时校验，如果运行时校验，则会耗费时间，对于应用启动的时候，会加载大量的类，如果里面的类都被打上标志的话，将会启动很快，反而言之，则会影响启动速度。

现在发生这么一种情况， classA 是需要修复的， 现在被单独放在一个新dex中，这个时候application 去加载 classA就会发现 不在同一个dex中，从而发生错误。 而QQ空间通过javaassist 字节码操作，将所有的类的构造函数，插入一个新dex的类的引用，因而， 所有的类都不会打上这个标志，因而避免这个校验失败。但是也导致所有类的 vertify 操作，推迟到 Runtime，从而影响应用启动的过程。

2. art虚拟机下， 因为 art 会将类的方法地址进行内联，从而导致，如果改动一个类的方法或者域，有可能引起其他直接引用该类的地址发生错乱，因此，也需要把相关的类打进补丁，这样子就会造成补丁包很大了，增加了 rom体积

而 tinker采取全量dex更换，避免dalvik虚拟机的插桩行为。
新dex 与 基线 dex 进行比较，通过自研算法dexdiff,得到差量dex，大大减少补丁的体积，下载后补丁后，通过拷贝出apk中dex，然后通过算法，将差量dex和新dex重新组合成修复了bug的新dex， 然后就是像 multidex 一样，加载新dex，替换掉原来的Element[], 这种操作就全量替代了旧dex，但是我们知道，application类是先于 tinker 实现替换操作的， 所以application类是无法进行修复的，tinker 把application类和tinker核心类打进main dex中，然后将application的所有代码迁移到 applicationLike的 新类中实现，这样子，application的代码就会非常干净了，其他类就可以进行修复了，这样子，就可以用全量dex替换掉旧的dex,而又不会影响程序启动 -- application 类非常干净，不过入侵性还是有点的，改变了原来的 编程方式。

tinker的全量dex合成方案，并没有改变class在原来dex的位置，即没有发生 classA 、classB 在dex1 中，修复后的全量dex，仍然存在这样的关系，并不会把ClassB移除去这种情况，因为tinker关注的是类的变化，而不是位置。所以不存在qq空间的问题。

multidex的原理

