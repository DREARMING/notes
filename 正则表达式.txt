正则表达式:

\d 表示一个整数
\s 表示一个空格或者tab键等空白字符
\w 表示一个字母

{n} 表示前面的字符可以有n个
{n-m} 表示前面的字符可以有n-m个

+ 表示至少有一个
* 表示有任意个，包含0个
? 表示0或者1个
| 可以表示一个字符或者另外一个字符，类似[ab] == a|b

[] 表示范围，可以是[]里面的字符的任意一个，比如[abc]可以是abc任意一个字符

^ 表示行开头  ^\d 表示必须以数字开头
$ 表示行结尾  \d$ 表示必须以数字结尾

Javascript表达式用法： 用 // 表示正则表达式，表达式放在中间

var reg = /\d{3}\-\d{2-5}/;
reg.test("010-123") //true
reg.test('010 123') //false 缺 '-'


字符串split

var str = 'a b  c  d'
str.split(' ') // = [a,b,'',c,'',d]

str.split(/\s+/) // ==> [a,b,c]


分组提取字串

var re = /^(\d{3})-(\d{3,8})$/;
re.exec('010-12345'); // ['010-12345', '010', '12345']
re.exec('010 12345'); // null

如果正则表达式中定义了组，就可以在RegExp对象上用exec()方法提取出子串来。

exec()方法在匹配成功后，会返回一个Array，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。

exec()方法在匹配失败时返回null。

